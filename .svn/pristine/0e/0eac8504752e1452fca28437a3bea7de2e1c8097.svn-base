using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PlayerMovement : MonoBehaviour
{
    public float turnSpeed = 20f;
    public int blood = 3;
    bool m_IsLiving = true;

    Animator m_Animator;
    Rigidbody m_Rigidbody;
    AudioSource m_AudioSource;
    Vector3 m_Movement;
    Quaternion m_Rotation = Quaternion.identity;
    PlayerState playerState;

    public bool IsLiving { get => m_IsLiving; set => m_IsLiving = value; }

    void Start()
    {
        m_IsLiving = true;
        m_Animator = GetComponent<Animator>();
        m_Rigidbody = GetComponent<Rigidbody>();
        m_AudioSource = GetComponent<AudioSource>();
        playerState = new PlayerState(m_Animator, m_AudioSource);
        playerState.SetPlayerState(new StandingState(playerState));
        //StartCoroutine("Injured");
    }


    void FixedUpdate()
    {
        if (m_IsLiving)
        {
            ChangeState();
        }

    }

    void ChangeState()
    {
        float horizontal = Input.GetAxis("Horizontal");
        float vertical = Input.GetAxis("Vertical");

        m_Movement.Set(horizontal, 0f, vertical);
        m_Movement.Normalize();

        bool hasHorizontalInput = !Mathf.Approximately(horizontal, 0f);
        bool hasVerticalInput = !Mathf.Approximately(vertical, 0f);
        bool isWalking = hasHorizontalInput || hasVerticalInput;

        if (isWalking)
        {
            playerState.SetPlayerState(new WalkingState(playerState));
        }
        else
        {
            playerState.SetPlayerState(new StandingState(playerState));
        }

        Vector3 desiredForward = Vector3.RotateTowards(transform.forward, m_Movement, turnSpeed * Time.deltaTime, 0f);
        m_Rotation = Quaternion.LookRotation(desiredForward);
    }

    void OnAnimatorMove()
    {
        m_Rigidbody.MovePosition(m_Rigidbody.position + m_Movement * m_Animator.deltaPosition.magnitude);
        m_Rigidbody.MoveRotation(m_Rotation);
    }

    public void Caughted()
    {
        StartCoroutine("Injured");
    }

    public void Escape()
    {
        StopCoroutine("Injured");
    }

    IEnumerator Injured()
    {
        while (blood > 0 && m_IsLiving)
        {
            blood--;
            Debug.Log(blood);
            UIController.Instance.UpdateBlood();
            if (blood == 0)
            {
                playerState.SetPlayerState(new DieState(playerState));
                m_IsLiving = false;
                break;
            }
            yield return new WaitForSeconds(1);
        }
    }
}